
    def update(self, *args):
        """ Update the affected area and return the affectedRect,
            relative to parent's coord system 
        """
        image = self.image
        ownImage = self.ownImage
        self.rect.topleft = self.pos
        if not self.childs:
            if self._redrawed:
                if ownImage is not None:
                    image.fill(COLOR_TRANS)
                    image.blit(ownImage, (0, 0))
                self._redrawed = 0
                return self.rect
            return False
        # update the affectedRect part of image 
        affected = any(updated
        rects = []
        for child in self.childs:
            rect = child.update(*args)
            if rect is not None: 
                rect = child.rect
                rect.topleft = self.pos + rect.topleft
                rects.append(rect)
        if self._redrawed:
            rects.append(self.rect)
            self._redrawed = 0
        if not rects:
            return None
        affectedRect = rects[-1].unionall(rects)
        affectedRect.topleft = self.pos * (-1) + affectedRect.topleft
        # reset the affected area as self's ownImage
        pg.draw.rect(image, COLOR_TRANS, affectedRect, 0)
        if ownImage:
            image.blit(ownImage, affectedRect, affectedRect)
        # sort the childs by their level, render the lowwer level ones first.
        collide = affectedRect.colliderect
        for child in sorted(self.childs, cmp=lambda x, y: x.level < y.level):
            if collide(child.rect): 
                image.blit(child.image, child.rect)
        affectedRect.topleft = self.pos + affectedRect.topleft
        return affectedRect

    def update(self, *args):
        """ Update the affected area.
            If readlly updated, return the updated rect, else None
        """
        # update the pos
        self.rect.topleft = self.pos
        # redraw self if necessery
        if self._needRedraw:
            self.redraw()
            self._needRedraw = 0
        image = self.image
        ownImage = self.ownImage
        # update childs recursivly
        chdRects = []
        for c in self.childs:
            chdRects1 = c.update(*args)
            if c._lastRect != c.rect:
                # this child moved or resized
                if c._lastRect:
                    chdRects.append(c._lastRect)
                chdRects.append(c.rect)
                c._lastRect = c.rect.copy()
            elif chdRects1:
                # this child updated in rects chdRects1
                chdRects += chdRects1
        # get the updated rects
        rects = []
        if self._redrawed:
            rect = self.rect.copy()
            rect.topleft = (0, 0)
            rects.append(rect)
            del rect
            self._redrawed = 0
        else:
            # rect = rects_join(chdRects)
            rects += chdRects
            if not rects:
                return None
        # merge the collide rect in rects
        n = len(rects)
        rects1 = []
        cnt = 0
        for i in xrange(n):
            rects2 = [rects[i]]
            for j in xrange(i+1, n):
                cnt += 1
                if rects[j].collidelist(rects2):
                    rects2.append(rects[j])
            rects1.append(rects_join(rects2))
        rects = rects1
        # if cnt: print self, 'cnt', cnt, 'rects', len(rects)
        # recover ownImage
        if ownImage:
            for rect in rects:
                pg.draw.rect(image, COLOR_TRANS, rect)
                # print 'blit own', self, rect 
                image.blit(ownImage, rect, rect)
        # render the lowwer level ones first.
        for child in reversed(self.childs):
            for rect in rects:
                if child.rect.colliderect(rect):
                    x, y = child.rect.topleft
                    # print 'blit child', self, rect
                    image.blit(child.image, rect, rect.move((-x, -y)))
        # print self, 'upadte', rect.move(self.rect.topleft)
        return [rect.move(self.rect.topleft) for rect in rects]

